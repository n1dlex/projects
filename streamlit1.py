# app.py
import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import psycopg2
from datetime import datetime

# –§—É–Ω–∫—Ü—ñ—ó get_connection() —ñ get_data() –∑–∞–ª–∏—à–∞—é—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω

def format_metric(value, format_type):
    if format_type == 'speed':
        return f"{value:.1f} Mbps"
    elif format_type == 'percentage':
        return f"{value:.1f}%"
    elif format_type == 'time':
        return f"{value:.1f} –º—Å"
    elif format_type == 'money':
        return f"‚Ç¥{value:.2f}"
    else:
        return f"{value:.1f}"

def create_time_filters(df, date_column):
    # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ —Å—Ç–æ–≤–ø–µ—Ü—å –¥–∞—Ç–∏ —É datetime, —è–∫—â–æ –≤—ñ–Ω —â–µ –Ω–µ –≤ —Ü—å–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ
    if not pd.api.types.is_datetime64_any_dtype(df[date_column]):
        df[date_column] = pd.to_datetime(df[date_column])
    
    # –û—Ç—Ä–∏–º—É—î–º–æ –¥—ñ–∞–ø–∞–∑–æ–Ω –¥–∞—Ç
    min_date = df[date_column].min()
    max_date = df[date_column].max()
    
    return st.date_input(
        "–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ–∞–ø–∞–∑–æ–Ω –¥–∞—Ç",
        value=(min_date, max_date),
        min_value=min_date,
        max_value=max_date,
    )

def main():
    st.set_page_config(page_title="–ö–†–Ü –î–∞—à–±–æ—Ä–¥", layout="wide")
    
    # –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è CSS –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –≤–∏–≥–ª—è–¥—É
    st.markdown("""
        <style>
        .metric-container {
            background-color: #f0f2f6;
            border-radius: 5px;
            padding: 10px;
            margin-bottom: 10px;
        }
        .metric-title {
            font-size: 14px;
            color: #555;
        }
        .metric-value {
            font-size: 24px;
            font-weight: bold;
            color: #0e1117;
        }
        </style>
    """, unsafe_allow_html=True)

    st.title('üìä –î–∞—à–±–æ—Ä–¥ –ö–†–Ü —à–∏—Ä–æ–∫–æ—Å–º—É–≥–æ–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø—É –¥–æ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É')

    try:
        technical_df, business_df, operational_df = get_data()
    except psycopg2.OperationalError as e:
        st.error(f"–ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö: {str(e)}")
        return

    # –ì–æ–ª–æ–≤–Ω—ñ KPI —É –≤–µ—Ä—Ö–Ω—ñ–π —á–∞—Å—Ç–∏–Ω—ñ
    st.markdown("### üìà –ö–ª—é—á–æ–≤—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏")
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.markdown(f"""
            <div class="metric-container">
                <div class="metric-title">–°–µ—Ä–µ–¥–Ω—è —à–≤–∏–¥–∫—ñ—Å—Ç—å</div>
                <div class="metric-value">{format_metric(technical_df['download_speed'].mean(), 'speed')}</div>
            </div>
        """, unsafe_allow_html=True)
    
    with col2:
        st.markdown(f"""
            <div class="metric-container">
                <div class="metric-title">ARPU</div>
                <div class="metric-value">{format_metric(business_df['arpu'].mean(), 'money')}</div>
            </div>
        """, unsafe_allow_html=True)
    
    with col3:
        st.markdown(f"""
            <div class="metric-container">
                <div class="metric-title">Uptime</div>
                <div class="metric-value">{format_metric(technical_df['uptime'].mean(), 'percentage')}</div>
            </div>
        """, unsafe_allow_html=True)
    
    with col4:
        st.markdown(f"""
            <div class="metric-container">
                <div class="metric-title">FCR Rate</div>
                <div class="metric-value">{format_metric(operational_df['fcr_rate'].mean(), 'percentage')}</div>
            </div>
        """, unsafe_allow_html=True)

    # –í–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –ö–†–Ü
    tab1, tab2, tab3 = st.tabs(["üì° –¢–µ—Ö–Ω—ñ—á–Ω—ñ –ö–†–Ü", "üíº –ë—ñ–∑–Ω–µ—Å –ö–†–Ü", "üîß –û–ø–µ—Ä–∞—Ü—ñ–π–Ω—ñ –ö–†–Ü"])

    # –¢–µ—Ö–Ω—ñ—á–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏
    with tab1:
        st.markdown("## üì° –¢–µ—Ö–Ω—ñ—á–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏")
        
        # –§—ñ–ª—å—Ç—Ä–∏ —á–∞—Å—É –¥–ª—è —Ç–µ—Ö–Ω—ñ—á–Ω–∏—Ö –¥–∞–Ω–∏—Ö
        start_date, end_date = create_time_filters(technical_df, 'timestamp')
        filtered_tech_df = technical_df[(technical_df['timestamp'].dt.date >= start_date) & 
                                       (technical_df['timestamp'].dt.date <= end_date)]

        # –ì—Ä–∞—Ñ—ñ–∫–∏ –≤ –¥–≤–∞ —Å—Ç–æ–≤–ø—Ü—ñ
        col1, col2 = st.columns(2)
        
        with col1:
            # –ì—Ä–∞—Ñ—ñ–∫ —à–≤–∏–¥–∫–æ—Å—Ç–µ–π
            fig_speed = px.line(filtered_tech_df, x='timestamp', 
                               y=['download_speed', 'upload_speed'],
                               labels={'value': '–®–≤–∏–¥–∫—ñ—Å—Ç—å (Mbps)', 
                                      'timestamp': '–ß–∞—Å',
                                      'variable': '–¢–∏–ø —à–≤–∏–¥–∫–æ—Å—Ç—ñ'},
                               title="üì∂ –®–≤–∏–¥–∫—ñ—Å—Ç—å –ø–µ—Ä–µ–¥–∞—á—ñ –¥–∞–Ω–∏—Ö")
            fig_speed.update_layout(height=300)
            st.plotly_chart(fig_speed, use_container_width=True)

            # –ì—Ä–∞—Ñ—ñ–∫ packet loss —Ç–∞ uptime
            fig_quality = px.line(filtered_tech_df, x='timestamp', 
                                 y=['packet_loss', 'uptime'],
                                 labels={'value': '–í—ñ–¥—Å–æ—Ç–∫–∏ (%)', 
                                        'timestamp': '–ß–∞—Å',
                                        'variable': '–ü–æ–∫–∞–∑–Ω–∏–∫'},
                                 title="üìä –Ø–∫—ñ—Å—Ç—å –∑'—î–¥–Ω–∞–Ω–Ω—è")
            fig_quality.update_layout(height=300)
            st.plotly_chart(fig_quality, use_container_width=True)

        with col2:
            # –ì—Ä–∞—Ñ—ñ–∫ –∑–∞—Ç—Ä–∏–º–∫–∏ —Ç–∞ –¥–∂–∏—Ç–µ—Ä–∞
            fig_latency = px.line(filtered_tech_df, x='timestamp', 
                                 y=['latency', 'jitter'],
                                 labels={'value': '–ú—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∏ (ms)', 
                                        'timestamp': '–ß–∞—Å',
                                        'variable': '–ü–æ–∫–∞–∑–Ω–∏–∫'},
                                 title="‚è±Ô∏è –ó–∞—Ç—Ä–∏–º–∫–∞ —Ç–∞ –¥–∂–∏—Ç–µ—Ä")
            fig_latency.update_layout(height=300)
            st.plotly_chart(fig_latency, use_container_width=True)

        # –¢–∞–±–ª–∏—Ü—è –∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
        st.markdown("### üìã –î–µ—Ç–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ")
        st.dataframe(filtered_tech_df.style.highlight_max(axis=0), use_container_width=True)

    # –ë—ñ–∑–Ω–µ—Å –ø–æ–∫–∞–∑–Ω–∏–∫–∏
    with tab2:
        st.markdown("## üíº –ë—ñ–∑–Ω–µ—Å –ø–æ–∫–∞–∑–Ω–∏–∫–∏")
        
        # –§—ñ–ª—å—Ç—Ä–∏ —á–∞—Å—É –¥–ª—è –±—ñ–∑–Ω–µ—Å –¥–∞–Ω–∏—Ö
        start_date, end_date = create_time_filters(business_df, 'date')
        filtered_bus_df = business_df[(business_df['date'].dt.date >= start_date) & 
                                     (business_df['date'].dt.date <= end_date)]

        col1, col2 = st.columns(2)
        
        with col1:
            # ARPU —Ç–∞ Cost per MB
            fig_arpu = make_subplots(specs=[[{"secondary_y": True}]])
            fig_arpu.add_trace(
                go.Scatter(x=filtered_bus_df['date'], y=filtered_bus_df['arpu'],
                          name="ARPU", line=dict(color="#1f77b4")),
                secondary_y=False)
            fig_arpu.add_trace(
                go.Scatter(x=filtered_bus_df['date'], y=filtered_bus_df['cost_per_mb'],
                          name="Cost per MB", line=dict(color="#ff7f0e")),
                secondary_y=True)
            fig_arpu.update_layout(title="üí∞ ARPU —Ç–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å –∑–∞ MB", height=300)
            fig_arpu.update_yaxes(title_text="ARPU (‚Ç¥)", secondary_y=False)
            fig_arpu.update_yaxes(title_text="–í–∞—Ä—Ç—ñ—Å—Ç—å –∑–∞ MB (‚Ç¥)", secondary_y=True)
            st.plotly_chart(fig_arpu, use_container_width=True)

        with col2:
            # Churn rate —Ç–∞ NPS
            fig_churn = make_subplots(specs=[[{"secondary_y": True}]])
            fig_churn.add_trace(
                go.Scatter(x=filtered_bus_df['date'], y=filtered_bus_df['churn_rate'],
                          name="Churn Rate", line=dict(color="#d62728")),
                secondary_y=False)
            fig_churn.add_trace(
                go.Scatter(x=filtered_bus_df['date'], y=filtered_bus_df['nps'],
                          name="NPS", line=dict(color="#2ca02c")),
                secondary_y=True)
            fig_churn.update_layout(title="üìâ Churn Rate —Ç–∞ NPS", height=300)
            fig_churn.update_yaxes(title_text="Churn Rate (%)", secondary_y=False)
            fig_churn.update_yaxes(title_text="NPS", secondary_y=True)
            st.plotly_chart(fig_churn, use_container_width=True)

        # –¢–∞–±–ª–∏—Ü—è –∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
        st.markdown("### üìã –î–µ—Ç–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ")
        st.dataframe(filtered_bus_df.style.highlight_max(axis=0), use_container_width=True)

    # –û–ø–µ—Ä–∞—Ü—ñ–π–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏
    with tab3:
        st.markdown("## üîß –û–ø–µ—Ä–∞—Ü—ñ–π–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏")
        
        # –§—ñ–ª—å—Ç—Ä–∏ —á–∞—Å—É –¥–ª—è –æ–ø–µ—Ä–∞—Ü—ñ–π–Ω–∏—Ö –¥–∞–Ω–∏—Ö
        start_date, end_date = create_time_filters(operational_df, 'date')
        filtered_op_df = operational_df[(operational_df['date'].dt.date >= start_date) & 
                                       (operational_df['date'].dt.date <= end_date)]

        col1, col2 = st.columns(2)
        
        with col1:
            # –ì—Ä–∞—Ñ—ñ–∫ –∑–≤–µ—Ä–Ω–µ–Ω—å —Ç–∞ –Ω–æ–≤–∏—Ö –ø—ñ–¥–∫–ª—é—á–µ–Ω—å
            fig_tickets = go.Figure()
            fig_tickets.add_trace(go.Bar(x=filtered_op_df['date'], 
                                        y=filtered_op_df['support_tickets'],
                                        name="–ó–≤–µ—Ä–Ω–µ–Ω–Ω—è"))
            fig_tickets.add_trace(go.Bar(x=filtered_op_df['date'], 
                                        y=filtered_op_df['new_connections'],
                                        name="–ù–æ–≤—ñ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è"))
            fig_tickets.update_layout(title="üìû –ó–≤–µ—Ä–Ω–µ–Ω–Ω—è —Ç–∞ –Ω–æ–≤—ñ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è", 
                                     barmode='group', height=300)
            st.plotly_chart(fig_tickets, use_container_width=True)

        with col2:
            # FCR Rate —Ç–∞ —á–∞—Å –≤–∏—Ä—ñ—à–µ–Ω–Ω—è
            fig_fcr = make_subplots(specs=[[{"secondary_y": True}]])
            fig_fcr.add_trace(
                go.Scatter(x=filtered_op_df['date'], y=filtered_op_df['fcr_rate'],
                          name="FCR Rate", line=dict(color="#2ca02c")),
                secondary_y=False)
            fig_fcr.add_trace(
                go.Scatter(x=filtered_op_df['date'], y=filtered_op_df['avg_resolution_time'],
                          name="–ß–∞—Å –≤–∏—Ä—ñ—à–µ–Ω–Ω—è", line=dict(color="#d62728")),
                secondary_y=True)
            fig_fcr.update_layout(title="‚è±Ô∏è FCR Rate —Ç–∞ —á–∞—Å –≤–∏—Ä—ñ—à–µ–Ω–Ω—è", height=300)
            fig_fcr.update_yaxes(title_text="FCR Rate (%)", secondary_y=False)
            fig_fcr.update_yaxes(title_text="–ß–∞—Å –≤–∏—Ä—ñ—à–µ–Ω–Ω—è (–≥–æ–¥)", secondary_y=True)
            st.plotly_chart(fig_fcr, use_container_width=True)

        # –¢–∞–±–ª–∏—Ü—è –∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
        st.markdown("### üìã –î–µ—Ç–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ")
        st.dataframe(filtered_op_df.style.highlight_max(axis=0), use_container_width=True)

if __name__ == "__main__":
    main()
