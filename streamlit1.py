import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import psycopg2

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö
def get_connection():
    return psycopg2.connect(
        host='test.cjyyo648mw6r.eu-north-1.rds.amazonaws.com',
        database='test',
        user='postgres',
        password='11111111'
    )

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ –±–∞–∑–∏
def get_data():
    conn = get_connection()
    try:
        technical_df = pd.read_sql("""
            SELECT timestamp, download_speed, upload_speed, packet_loss, latency, jitter, uptime
            FROM technical_kpi
            ORDER BY timestamp DESC
            LIMIT 24
        """, conn)

        business_df = pd.read_sql("""
            SELECT date, arpu, churn_rate, nps, utilization_rate, cost_per_mb
            FROM business_kpi
            ORDER BY date DESC
            LIMIT 30
        """, conn)

        operational_df = pd.read_sql("""
            SELECT date, avg_resolution_time, support_tickets, fcr_rate, new_connections, capacity_utilization
            FROM operational_kpi
            ORDER BY date DESC
            LIMIT 30
        """, conn)

    finally:
        conn.close()

    return technical_df, business_df, operational_df

def format_metric(value, format_type):
    if format_type == 'speed':
        return f"{value:.1f} Mbps"
    elif format_type == 'percentage':
        return f"{value:.1f}%"
    elif format_type == 'time':
        return f"{value:.1f} –º—Å"
    elif format_type == 'money':
        return f"‚Ç¥{value:.2f}"
    else:
        return f"{value:.1f}"

def main():
    st.set_page_config(page_title="–ö–†–Ü –î–∞—à–±–æ—Ä–¥", layout="wide")
    
    # –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è CSS –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –≤–∏–≥–ª—è–¥—É
    st.markdown("""
        <style>
        .metric-container {
            background-color: #f0f2f6;
            border-radius: 5px;
            padding: 10px;
            margin-bottom: 10px;
        }
        .metric-title {
            font-size: 14px;
            color: #555;
        }
        .metric-value {
            font-size: 24px;
            font-weight: bold;
            color: #0e1117;
        }
        </style>
    """, unsafe_allow_html=True)

    st.title('üìä –î–∞—à–±–æ—Ä–¥ –ö–†–Ü —à–∏—Ä–æ–∫–æ—Å–º—É–≥–æ–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø—É –¥–æ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É')

    try:
        technical_df, business_df, operational_df = get_data()
    except psycopg2.OperationalError as e:
        st.error(f"–ü–æ–º–∏–ª–∫–∞ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö: {str(e)}")
        return

    # –ì–æ–ª–æ–≤–Ω—ñ KPI —É –≤–µ—Ä—Ö–Ω—ñ–π —á–∞—Å—Ç–∏–Ω—ñ
    st.markdown("### üìà –°–µ—Ä–µ–¥–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏")
    col1, col2, col3, col4 = st.columns(4)
    
    # –¢–µ—Ö–Ω—ñ—á–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏
    with col1:
        st.markdown(f"""
            <div class="metric-container">
                <div class="metric-title">–°–µ—Ä–µ–¥–Ω—è —à–≤–∏–¥–∫—ñ—Å—Ç—å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è</div>
                <div class="metric-value">{format_metric(technical_df['download_speed'].mean(), 'speed')}</div>
            </div>
        """, unsafe_allow_html=True)

    with col2:
        st.markdown(f"""
            <div class="metric-container">
                <div class="metric-title">–°–µ—Ä–µ–¥–Ω—è —à–≤–∏–¥–∫—ñ—Å—Ç—å –≤–∏–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è</div>
                <div class="metric-value">{format_metric(technical_df['upload_speed'].mean(), 'speed')}</div>
            </div>
        """, unsafe_allow_html=True)

    with col3:
        st.markdown(f"""
            <div class="metric-container">
                <div class="metric-title">–°–µ—Ä–µ–¥–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è –≤—Ç—Ä–∞—Ç –ø–∞–∫–µ—Ç—ñ–≤</div>
                <div class="metric-value">{format_metric(technical_df['packet_loss'].mean(), 'percentage')}</div>
            </div>
        """, unsafe_allow_html=True)

    with col4:
        st.markdown(f"""
            <div class="metric-container">
                <div class="metric-title">–°–µ—Ä–µ–¥–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞—Ç—Ä–∏–º–∫–∏</div>
                <div class="metric-value">{format_metric(technical_df['latency'].mean(), 'time')}</div>
            </div>
        """, unsafe_allow_html=True)

    # –í–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –ö–†–Ü
    tab1, tab2, tab3 = st.tabs(["üì° –¢–µ—Ö–Ω—ñ—á–Ω—ñ –ö–†–Ü", "üíº –ë—ñ–∑–Ω–µ—Å –ö–†–Ü", "üîß –û–ø–µ—Ä–∞—Ü—ñ–π–Ω—ñ –ö–†–Ü"])

    # –¢–µ—Ö–Ω—ñ—á–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏
    with tab1:
        st.markdown("## üì° –¢–µ—Ö–Ω—ñ—á–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏")
        
        # –ì—Ä–∞—Ñ—ñ–∫–∏ –≤ –¥–≤–∞ —Å—Ç–æ–≤–ø—Ü—ñ
        col1, col2 = st.columns(2)
        
        with col1:
            # –ì—Ä–∞—Ñ—ñ–∫ —à–≤–∏–¥–∫–æ—Å—Ç–µ–π
            fig_speed = px.line(technical_df, x='timestamp', 
                               y=['download_speed', 'upload_speed'],
                               labels={'value': '–®–≤–∏–¥–∫—ñ—Å—Ç—å (Mbps)', 
                                      'timestamp': '–ß–∞—Å',
                                      'variable': '–¢–∏–ø —à–≤–∏–¥–∫–æ—Å—Ç—ñ'},
                               title="üì∂ –®–≤–∏–¥–∫—ñ—Å—Ç—å –ø–µ—Ä–µ–¥–∞—á—ñ –¥–∞–Ω–∏—Ö")
            fig_speed.update_layout(height=300)
            st.plotly_chart(fig_speed, use_container_width=True)

            # –ì—Ä–∞—Ñ—ñ–∫ packet loss —Ç–∞ uptime
            fig_quality = px.line(technical_df, x='timestamp', 
                                 y=['packet_loss', 'uptime'],
                                 labels={'value': '–í—ñ–¥—Å–æ—Ç–∫–∏ (%)', 
                                        'timestamp': '–ß–∞—Å',
                                        'variable': '–ü–æ–∫–∞–∑–Ω–∏–∫'},
                                 title="üìä –Ø–∫—ñ—Å—Ç—å –∑'—î–¥–Ω–∞–Ω–Ω—è")
            fig_quality.update_layout(height=300)
            st.plotly_chart(fig_quality, use_container_width=True)

        with col2:
            # –ì—Ä–∞—Ñ—ñ–∫ –∑–∞—Ç—Ä–∏–º–∫–∏ —Ç–∞ –¥–∂–∏—Ç–µ—Ä–∞
            fig_latency = px.line(technical_df, x='timestamp', 
                                 y=['latency', 'jitter'],
                                 labels={'value': '–ú—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∏ (ms)', 
                                        'timestamp': '–ß–∞—Å',
                                        'variable': '–ü–æ–∫–∞–∑–Ω–∏–∫'},
                                 title="‚è±Ô∏è –ó–∞—Ç—Ä–∏–º–∫–∞ —Ç–∞ –¥–∂–∏—Ç–µ—Ä")
            fig_latency.update_layout(height=300)
            st.plotly_chart(fig_latency, use_container_width=True)

        # –¢–∞–±–ª–∏—Ü—è –∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
        st.markdown("### üìã –î–µ—Ç–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ")
        st.dataframe(technical_df, use_container_width=True)

    # –ë—ñ–∑–Ω–µ—Å –ø–æ–∫–∞–∑–Ω–∏–∫–∏
    with tab2:
        st.markdown("## üíº –ë—ñ–∑–Ω–µ—Å –ø–æ–∫–∞–∑–Ω–∏–∫–∏")
        
        # –°–µ—Ä–µ–¥–Ω—ñ –±—ñ–∑–Ω–µ—Å –ø–æ–∫–∞–∑–Ω–∏–∫–∏
        col1, col2 = st.columns(2)

        with col1:
            st.markdown(f"""
                <div class="metric-container">
                    <div class="metric-title">–°–µ—Ä–µ–¥–Ω—ñ–π ARPU</div>
                    <div class="metric-value">{format_metric(business_df['arpu'].mean(), 'money')}</div>
                </div>
            """, unsafe_allow_html=True)

            st.markdown(f"""
                <div class="metric-container">
                    <div class="metric-title">–°–µ—Ä–µ–¥–Ω—ñ–π Churn Rate</div>
                    <div class="metric-value">{format_metric(business_df['churn_rate'].mean(), 'percentage')}</div>
                </div>
            """, unsafe_allow_html=True)

        with col2:
            st.markdown(f"""
                <div class="metric-container">
                    <div class="metric-title">–°–µ—Ä–µ–¥–Ω—î NPS</div>
                    <div class="metric-value">{format_metric(business_df['nps'].mean(), 'money')}</div>
                </div>
            """, unsafe_allow_html=True)

            st.markdown(f"""
                <div class="metric-container">
                    <div class="metric-title">–°–µ—Ä–µ–¥–Ω—è –≤–∞—Ä—Ç—ñ—Å—Ç—å –∑–∞ MB</div>
                    <div class="metric-value">{format_metric(business_df['cost_per_mb'].mean(), 'money')}</div>
                </div>
            """, unsafe_allow_html=True)

        # –ì—Ä–∞—Ñ—ñ–∫–∏ –±—ñ–∑–Ω–µ—Å –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤
        col1, col2 = st.columns(2)

        with col1:
            # ARPU —Ç–∞ Cost per MB
            fig_arpu = make_subplots(specs=[[{"secondary_y": True}]])
            fig_arpu.add_trace(
                go.Scatter(x=business_df['date'], y=business_df['arpu'],
                          name="ARPU", line=dict(color="#1f77b4")),
                secondary_y=False)
            fig_arpu.add_trace(
                go.Scatter(x=business_df['date'], y=business_df['cost_per_mb'],
                          name="Cost per MB", line=dict(color="#ff7f0e")),
                secondary_y=True)
            fig_arpu.update_layout(title="üí∞ ARPU —Ç–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å –∑–∞ MB", height=300)
            fig_arpu.update_yaxes(title_text="ARPU (‚Ç¥)", secondary_y=False)
            fig_arpu.update_yaxes(title_text="–í–∞—Ä—Ç—ñ—Å—Ç—å –∑–∞ MB (‚Ç¥)", secondary_y=True)
            st.plotly_chart(fig_arpu, use_container_width=True)

        with col2:
            # Churn Rate —Ç–∞ NPS
            fig_churn_nps = make_subplots(specs=[[{"secondary_y": True}]])
            fig_churn_nps.add_trace(
                go.Scatter(x=business_df['date'], y=business_df['churn_rate'],
                          name="Churn Rate", line=dict(color="#d62728")),
                secondary_y=False)
            fig_churn_nps.add_trace(
                go.Scatter(x=business_df['date'], y=business_df['nps'],
                          name="NPS", line=dict(color="#2ca02c")),
                secondary_y=True)
            fig_churn_nps.update_layout(title="üìâ Churn Rate —Ç–∞ NPS", height=300)
            fig_churn_nps.update_yaxes(title_text="Churn Rate (%)", secondary_y=False)
            fig_churn_nps.update_yaxes(title_text="NPS", secondary_y=True)
            st.plotly_chart(fig_churn_nps, use_container_width=True)

        # –¢–∞–±–ª–∏—Ü—è –∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
        st.markdown("### üìã –î–µ—Ç–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ")
        st.dataframe(business_df, use_container_width=True)

    # –û–ø–µ—Ä–∞—Ü—ñ–π–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏
    with tab3:
        st.markdown("## üîß –û–ø–µ—Ä–∞—Ü—ñ–π–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏")

        # –°–µ—Ä–µ–¥–Ω—ñ –æ–ø–µ—Ä–∞—Ü—ñ–π–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏
        col1, col2 = st.columns(2)

        with col1:
            st.markdown(f"""
                <div class="metric-container">
                    <div class="metric-title">–°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –≤–∏—Ä—ñ—à–µ–Ω–Ω—è</div>
                    <div class="metric-value">{format_metric(operational_df['avg_resolution_time'].mean(), 'time')}</div>
                </div>
            """, unsafe_allow_html=True)

            st.markdown(f"""
                <div class="metric-container">
                    <div class="metric-title">–°–µ—Ä–µ–¥–Ω—è –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–≤–∏—Ç–∫—ñ–≤</div>
                    <div class="metric-value">{operational_df['support_tickets'].mean():.0f}</div>
                </div>
            """, unsafe_allow_html=True)

        with col2:
            st.markdown(f"""
                <div class="metric-container">
                    <div class="metric-title">–°–µ—Ä–µ–¥–Ω—ñ–π FCR Rate</div>
                    <div class="metric-value">{format_metric(operational_df['fcr_rate'].mean(), 'percentage')}</div>
                </div>
            """, unsafe_allow_html=True)

            st.markdown(f"""
                <div class="metric-container">
                    <div class="metric-title">–°–µ—Ä–µ–¥–Ω—è –∫—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–æ–≤–∏—Ö –∑'—î–¥–Ω–∞–Ω—å</div>
                    <div class="metric-value">{operational_df['new_connections'].mean():.0f}</div>
                </div>
            """, unsafe_allow_html=True)

        # –ì—Ä–∞—Ñ—ñ–∫–∏ –æ–ø–µ—Ä–∞—Ü—ñ–π–Ω–∏—Ö –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤
        col1, col2 = st.columns(2)

        with col1:
            # –ß–∞—Å –≤–∏—Ä—ñ—à–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º —Ç–∞ –Ω–æ–≤—ñ –∑'—î–¥–Ω–∞–Ω–Ω—è
            fig_resolution = make_subplots(specs=[[{"secondary_y": True}]])
            fig_resolution.add_trace(
                go.Scatter(x=operational_df['date'], y=operational_df['avg_resolution_time'],
                          name="–°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –≤–∏—Ä—ñ—à–µ–Ω–Ω—è", line=dict(color="#1f77b4")),
                secondary_y=False)
            fig_resolution.add_trace(
                go.Scatter(x=operational_df['date'], y=operational_df['new_connections'],
                          name="–ù–æ–≤—ñ –∑'—î–¥–Ω–∞–Ω–Ω—è", line=dict(color="#ff7f0e")),
                secondary_y=True)
            fig_resolution.update_layout(title="‚è≥ –ß–∞—Å –≤–∏—Ä—ñ—à–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º —Ç–∞ –Ω–æ–≤—ñ –∑'—î–¥–Ω–∞–Ω–Ω—è", height=300)
            fig_resolution.update_yaxes(title_text="–ß–∞—Å –≤–∏—Ä—ñ—à–µ–Ω–Ω—è (–≥–æ–¥–∏–Ω–∏)", secondary_y=False)
            fig_resolution.update_yaxes(title_text="–ù–æ–≤—ñ –∑'—î–¥–Ω–∞–Ω–Ω—è", secondary_y=True)
            st.plotly_chart(fig_resolution, use_container_width=True)

        with col2:
            # –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–≤–∏—Ç–∫—ñ–≤ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ —Ç–∞ –∫–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç FCR
            fig_tickets = make_subplots(specs=[[{"secondary_y": True}]])
            fig_tickets.add_trace(
                go.Scatter(x=operational_df['date'], y=operational_df['support_tickets'],
                          name="–ö–≤–∏—Ç–∫–∏ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏", line=dict(color="#d62728")),
                secondary_y=False)
            fig_tickets.add_trace(
                go.Scatter(x=operational_df['date'], y=operational_df['fcr_rate'],
                          name="FCR Rate", line=dict(color="#2ca02c")),
                secondary_y=True)
            fig_tickets.update_layout(title="üéüÔ∏è –ö–≤–∏—Ç–∫–∏ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ —Ç–∞ FCR Rate", height=300)
            fig_tickets.update_yaxes(title_text="–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–≤–∏—Ç–∫—ñ–≤", secondary_y=False)
            fig_tickets.update_yaxes(title_text="FCR Rate (%)", secondary_y=True)
            st.plotly_chart(fig_tickets, use_container_width=True)

        # –¢–∞–±–ª–∏—Ü—è –∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
        st.markdown("### üìã –î–µ—Ç–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ")
        st.dataframe(operational_df, use_container_width=True)

if __name__ == "__main__":
    main()
